name: 1_back_common

on:
  workflow_dispatch:
  workflow_call:
    secrets:
      OWNER_ACCESS_TOKEN:
        required: true
      SONAR_TOKEN:
        required: true
      SONAR_HOST_URL:
        required: true
    outputs:
      comment:
        value: ${{ jobs.create_comment.outputs.comment }}

jobs:
  semgrep:
    uses: ./.github/workflows/2_semgrep.yaml
    with:
      location: backend
      path: backend/NeuroFramework.Common/src
    secrets:
      OWNER_ACCESS_TOKEN: ${{ secrets.OWNER_ACCESS_TOKEN }}
  sonarqube:
    uses: ./.github/workflows/2_back_sonarqube.yaml
    with:
      solution_directory: backend/NeuroFramework.Common
      sonar_project: nfw-common-backend
    secrets:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
  code_analysis:
    uses: ./.github/workflows/2_back_code_analysis.yaml
    with:
      solution_directory: backend/NeuroFramework.Common
      solution_filename: Common.sln
    secrets:
      OWNER_ACCESS_TOKEN: ${{ secrets.OWNER_ACCESS_TOKEN }}
  unit_test:
    uses: ./.github/workflows/2_back_unit_test.yaml
    with:
      solution_directory: backend/NeuroFramework.Common
    secrets:
      OWNER_ACCESS_TOKEN: ${{ secrets.OWNER_ACCESS_TOKEN }}
  create_comment:
    if: always()
    needs: [semgrep, sonarqube, code_analysis, unit_test]
    runs-on: ubuntu-latest
    outputs:
      comment: ${{ steps.comment.outputs.result }}
    steps:
      - name: 🖊️ Create Comment
        uses: actions/github-script@v7
        id: comment
        with:
          result-encoding: string
          script: |
            const comments = [
              `${{ needs.semgrep.outputs.comment }}`,
              `${{ needs.sonarqube.outputs.comment }}`,
              `${{ needs.code_analysis.outputs.comment }}`,
              `${{ needs.unit_test.outputs.comment }}`
            ]
            return comments.filter(e => e.length > 0).join('\n\n');
