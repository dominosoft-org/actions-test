name: 2_back_license

on:
  workflow_call:
    secrets:
      REPO_ACCOUNT:
        required: true
      REPO_ACCESS_TOKEN:
        required: true
    inputs:
      solution_directory:
        description: 'slnファイルが存在するフォルダーへのパス（workspaceパスからの相対パス、末尾はスラッシュであること。）'
        type: string
        required: true
    outputs:
      result:
        value: ${{ jobs.check.outputs.result }}

jobs:
  check:
    runs-on: ubuntu-latest
    outputs:
      result: ${{ steps.create_comment.outputs.result }}
    steps:
      - name: 💼 Checkout
        uses: actions/checkout@v4
      - name: 🔧 Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 7.x
      - name: 🚀 Run dotnet-project-licenses tool
        run: |
          cd ./${{ inputs.solution_directory }}
          dotnet new tool-manifest
          dotnet tool install --local dotnet-project-licenses
          dotnet tool run dotnet-project-licenses -i ./ -u -j --packages-filter /NeuroFramework.*/
      - name: 👀 Check License
        id: check
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.REPO_ACCESS_TOKEN }}
          result-encoding: json
          script: |
            const { readFileSync } = require('fs');
            const { data } = await github.rest.repos.getContent({
              owner: "dominosoft-org",
              repo: "actions-test",
              path: "license-whitelist.json",
              ref: "main"
            });
            const excludeList = JSON.parse(new Buffer.from(data.content, data.encoding).toString());
            const licensesJson = readFileSync("./backend/NeuroFramework.Common/licenses.json");
            const licenses = JSON.parse(licensesJson);
            licenses.filter((license) => {
              return !excludeList.excludeLicenses.includes(license.LicenseType);
            }).filter((license) => {
              return !excludeList.excludePackages.some((excludePackage) => {
                return license.PackageName.startsWith(excludePackage);
              });
            }).filter((license) => {
              return !excludeList.excludeAuthors.some((excludeAuthor) => {
                return license.Authors.includes(excludeAuthor);
              });
            });
            return licenses;
      - name: 🖊️ Create Comment
        uses: actions/github-script@v7
        id: create_comment
        with:
          result-encoding: string
          script: |
            let result = "### :moneybag: Backend License Check\n\n"
            const licenses = ${{ steps.check.outputs.result }};
            if (licenses?.length) {
              result += licenses.map((license) => {
                return `- ${license.PackageName} (${license.LicenseType})`;
              }).join("\n");
              result += "\n\nIs it safe to use these libraries? Reviewers must judge that."
            }else {
              result += "- :ok_woman: All OK."
            }
            retrun result;
