name: 2_front_license

on:
  workflow_call:
    outputs:
      result:
        value: ${{ jobs.check.outputs.result }}

jobs:
  check:
    runs-on: ubuntu-latest
    outputs:
      result: ${{ steps.create_comment.outputs.result }}
    steps:
      - name: 💼 Checkout
        uses: actions/checkout@v4

      - name: 🖥️ Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: 🖥️ Setup pnpm
        uses: pnpm/action-setup@v2
        id: pnpm-setup
        with:
          version: latest
          run_install: false

      - name: 💾 Get pnpm Store Directory
        id: pnpm_cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: ⚡ Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm_cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('./frontend/**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: 🕵️ Search Paths
        id: search_paths
        run: |
          echo "paths=$(find ./frontend -name pnpm-lock.yaml -exec dirname {} \;)" >> $GITHUB_OUTPUT

      - name: 👀 Check License
        id: check
        uses: actions/github-script@v7
        with:
          result-encoding: json
          script: |
            const { readFileSync } = require('fs');
            // Globalにlicense-checker-rseidelsohnをインストール
            await exec.exec("pnpm", ["install", "-g", "license-checker-rseidelsohn"]);
            // license-whitelist.jsonを取得
            const { data } = await github.rest.repos.getContent({
              owner: "dominosoft-org",
              repo: "actions-test",
              path: "license-whitelist.json",
              ref: "main"
            });
            const excludeList = JSON.parse(new Buffer.from(data.content, data.encoding).toString());
            const directories = "${{ steps.search_paths.outputs.paths }}".split(" ");
            let mergedLicenses = {};
            for (const directory of directories) {
              process.chdir(directory);
              await exec.exec("license-checker-rseidelsohn", [
                "--production",
                "--json",
                "--excludeLicenses",
                `\"${excludeList.excludeLicenses.join(",")}\"`,
                "--excludePackagesStartingWith",
                `\"${excludeList.excludePackages.join(",")}\"`,
                "--out",
                "./licenses.json"
              ]);
              const licensesJson = readFileSync("./licenses.json");
              Object.assign(mergedLicenses, JSON.parse(licensesJson));
            }
            // licenses.jsonは { "packageName1": { "licenses": "MIT" }, "packageName2": { "licenses": "MIT" }... } という形式で返ってくるので、
            // ループしやすいように [{ "key": "packageName1", "value": { "licenses": "MIT" }},... }]の配列に変換する。
            // 変換前に、author（licenses.jsonではpublisher）のフィルタリングも行っておく。
            return Object.entries(mergedLicenses)
              .filter(e => excludeList.excludeAuthors.every((excludeAuthor) => excludeAuthor !== e[1].publisher))
              .map(([key, value]) => ({key, value}));

      - name: 🖊️ Create Comment
        id: create_comment
        uses: actions/github-script@v7
        with:
          result-encoding: string
          script: |
            let result = "### :moneybag: Frontend License Check\n\n";
            const licenses = ${{ steps.check.outputs.result }};
            if (licenses.length) {
              for (const license of licenses) {
                result += `- ${license.key} (${license.value.licenses})\n`;
              }
              result += "\n\n :thinking: Is it safe to use these libraries? Reviewers must judge that."
            }else {
              result += "- :ok_woman: All OK."
            }
            return result;
