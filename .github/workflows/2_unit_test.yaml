name: 2_unit_test

on:
  workflow_call:
    secrets:
      REPO_ACCOUNT:
        required: true
      REPO_ACCESS_TOKEN:
        required: true
    outputs:
      comment:
        value: ${{  jobs.merge_comment.outputs.comment  }}

env:
  GITHUB_ACCOUNT: ${{  secrets.REPO_ACCOUNT  }}
  GITHUB_PKG_NFW_AUTH_TOKEN: ${{  secrets.REPO_ACCESS_TOKEN  }}

jobs:
  unit_test:
    runs-on: windows-latest
    outputs:
      comment: ${{ steps.create_comment.outputs.result }}

    steps:
      - name: Checkout🛎️
        uses: actions/checkout@v4

      - name: Setup Nuget cache⚡
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Add MSBuild to PATH
        uses: microsoft/setup-msbuild@v1

      - name: Setup VSTest Path
        uses: darenm/Setup-VSTest@v1.2

      - name: Generate Unit Test Report
        run: |
          cd .\backend\NeuroFramework.Common
          dotnet restore --configfile "github-actions-nuget.config"
          msbuild -m -p:Configuration=Release -p:IsGithubActions=true -verbosity:quiet
          vstest.console.exe /Platform:x64 /InIsolation /Blame /Logger:trx /Enablecodecoverage ".\tests\NeuroFramework.*\bin\Release\net7.0\**.Tests.dll" /Collect:"Code Coverage;Format=Cobertura"

      - name: Test Report
        if: ${{ !cancelled() }}
        id: test_report
        uses: phoenix-actions/test-reporting@v12
        with:
          name: Unit Tests Report
          path: "./backend/NeuroFramework.Common/TestResults/**.trx"
          reporter: dotnet-trx
          fail-on-error: "true"
          only-summary: "false"
          list-suites: "all"
          list-tests: "all"

      - name: Create Comment
        if: ${{ !cancelled() }}
        id: create_comment
        uses: actions/github-script@v7
        with:
          result-encoding: string
          script: |
            let comment="### Backend Unit Test\n\n";
            comment += "Check The Unit Test Report: **${{ steps.test_report.outputs.runHtmlUrl }}**\n\n";
            return comment;

      - name: Upload Coverage Report
        uses: actions/upload-artifact@v3
        if: ${{ !cancelled() }}
        with:
          name: code coverage report
          path: .\backend\NeuroFramework.Common\TestResults\**\*.cobertura.xml

  code_coverage_report:
    needs: unit_test
    runs-on: ubuntu-latest
    if: ${{ !cancelled() }}
    outputs:
      comment: ${{ steps.create_comment.outputs.result }}
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: code coverage report
          path: coveragereport/

      - name: Code Coverage Report
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: coveragereport/**/*.cobertura.xml
          badge: true
          fail_below_min: false
          format: markdown
          hide_branch_rate: false
          hide_complexity: true
          indicators: true
          output: both
          thresholds: "60 80"

      - name: Upload Coverage Result Report
        uses: actions/upload-artifact@v3
        if: ${{ !cancelled() }}
        with:
          name: code coverage markdown report
          path: code-coverage-results.md

      - name: Create Comment
        if: ${{ !cancelled() }}
        id: create_comment
        uses: actions/github-script@v7
        with:
          result-encoding: string
          script: |
            const { readFileSync } = require('fs');
            return readFileSync('./code-coverage-results.md').toString() + "\n\n";

  merge_comment:
    needs: [ unit_test, code_coverage_report ]
    runs-on: ubuntu-latest
    if: ${{ !cancelled() }}
    outputs:
      comment: ${{ steps.merge_comments.outputs.result }}
    steps:
      - name: Merge Comments
        id: merge_comments
        uses: actions/github-script@v7
        with:
          result-encoding: string
          script: |
            const job_comments = [
              `${{ needs.unit_test.outputs.comment }}`,
              `${{ needs.code_coverage_report.outputs.comment }}`,
            ]
            return job_comments.filter(e => e.length > 0).join('\n\n');
